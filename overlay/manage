#! /usr/bin/perl -w


use FindBin;
use File::Spec;
use File::Temp;
use ShellCmd_1A7E54C0_9EFF_11D9_BFF3_00A0C9EF1631;


use constant pristine_tree => "vendor";
use constant live_cache_tree => "live-cache";
use constant more_toplevel_excludes => qw/README usr/;
use constant DEBUGGING => 0;


our($ROOT, $cfg_archive, $cfg_RCS, $tmpfile, $sh);


{
   package directory;
   use Carp;
   
   
   sub name {
      return shift->{name};
   }


   sub fail {
      my($me, $msg)= @_;
      croak qq'$msg directory "' . $me->name . qq'": $!';
   }   

   
   sub new {
      my(undef, $name)= @_;
      my $me= bless {};
      local *DIR;
      opendir DIR, $me->{name}= $name or $me->fail("Could not open");
      $me->{dh}= *DIR{IO};
      return $me;
   }
   
   
   DESTROY {
      my $me= shift;
      if (my $dh= $me->{dh}) {
         closedir $dh or $me->fail("Could not close");
      }
   }
   
   
   sub read {
      die if wantarray;
      return readdir shift->{dh};
   }
}


{
   package file;
   use Carp;
   
   
   sub name {
      return shift->{name};
   }


   sub fail {
      my($me, $msg)= @_;
      croak qq'$msg file "' . $me->name . qq'": $!';
   }   

   
   sub new {
      my(undef, $mode, $name)= @_;
      my $me= bless {};
      if (defined $name) {
         $me->{name}= $name;
      } else {
         my $n= $mode;
         if ($n =~ s/^\s*[|]\s*//) {
            $n= qq'pipe to command "$mode"';
         } elsif ($n =~ s/\s*[|]\s*$//) {
            $n= qq'pipe from command "$mode"';
         } else {
            croak qq'"$n" must be a pipe-command specifyer';
         }
         $me->{name}= $n;
      }
      local *FILE;
      $name ? open(FILE, $mode, $name) : open(FILE, $mode)
         or $me->fail("Could not open")
      ;
      $me->{fh}= *FILE{IO};
      return $me;
   }
   
   
   DESTROY {
      my $me= shift;
      if (my $fh= $me->{fh}) {
         close $fh or $me->fail("Could not close");
      }
   }
   
   
   sub readline {
      my $me= shift;
      my $line;
      die if wantarray;
      undef $!;
      unless (defined($line= readline $me->{fh})) {
         $me->fail("Error while reading from") if $!;
      }
      return $line;
   }
}


sub ensure_dir($) {
   my($rpath)= @_;
   -d $rpath && return;
   mkdir $rpath or die qq'Could not create directory "$rpath": $!';
   -d $rpath or die $!;
}


# Returns the file modification time from status in variable '_'.
sub mtime() {
   return +(stat _)[9];
}


sub updating($;$) {
   my($to, $from)= @_;
   $from||= "(without contents)";
   print STDERR qq'Updating file "$to" from file "$from".\n';
}


sub reconcile_file {
   my($vendor, $ovl, $cache, $live, $psd)= @_;
   my($arch, $t, $x);
   if (defined $cfg_archive) {
      my($vol, $dirs1, $dirs2);
      ($vol, $dirs1)= File::Spec->splitpath($cfg_archive, 1);
      (undef, $dirs2, $arch)= File::Spec->splitpath($live);
      $arch= File::Spec->catpath(
         $vol, File::Spec->catdir($dirs1, $dirs2), $arch
      );
      $arch.= ',v' if $cfg_RCS;
   }
   undef $psd if -l $psd || ! -d _;
   # Update vendor file from archive.
   if (
         defined($arch) && -f $arch && ($t= mtime , 1)
      && (!-f $vendor || mtime < $t)
   ) {
      if ($cfg_RCS) {
         $sh->try_next;
         if ($sh->call(qq{rlog "$arch" | grep -q '^branches:'}) == 0) {
            # Vendor branch is present.
            updating($vendor, $arch);
            $sh->call(qq'co -p -r1.1.1 "$arch" > "$tmpfile" 2> /dev/null');
         } else {
            # No vendor branch, create an empty file.
            # This avoids looking up the vendor branch over and over again
            # in later runs.
            updating($vendor);
            $sh->call(qq': > "$tmpfile"');
         }
         $sh->call('touch', '--reference=' . $arch, '--', $tmpfile);
         $sh->call(qw"mv -f --", $tmpfile, $vendor);
      } else {
         updating($vendor, $arch);
         $sh->call(qw"cp -af --", $arch, $vendor);
      }
   }
   reexamine:
   -f $ovl or die qq'File "$ovl" has to exist';
   $t= mtime; # mtime of overlay file.
   if (defined $psd) {
      # The overlay file is actually a template.
      # Reconcile overlay template file and vendor file.
      if (($x= -f $vendor) && mtime > $t) {
         # Vendor file exists and is newer. Update overlay template.
         if (-s $vendor) {
            # Vendor file is not empty.
            updating($ovl, $vendor);
            $sh->call(qw'cp -af --', $vendor, $ovl);
         } else {
            warn
                 qq'Empty vendor file "$vendor" '
               . qq'is newer than overlay file "$ovl"'
            ;
         }
      } elsif (!$x || $t > mtime) {
         # Overlay template is newer or vendor file does not exist.
         # Update vendor file.
         updating($vendor, $ovl);
         $sh->call(qw'cp -af --', $ovl, $vendor);
      }
      # Reconcile expanded overlay template file and live-cache file.
      {
         my $expand= sub {
            # Expand overlay template to temporary file.
            my $series= File::Spec->catfile($psd, 'series');
            # Acquire series file.
            {
               my $guards= "$series.guards";
               if (-e $guards) {
                  # Expand "series" file from "series.guards" file.
                  if (-e $series) {
                     die
                          qq'Expanded patch series file "$series" '
                        . qq'must not exist because patch series template '
                        . qq'file "$guards" also exists. '
                        . qq'Please remove "$series" and/or update "$guards" '
                        . qq'from it before running this script again'
                     ;
                  }
                  if (-l $guards || !-f _) {
                     die qq'"$guards" must be a normal file';
                  }
                  # We expand the 'series' file to a temporary location.
                  $series= "$tmpfile.series";
                  $sh->call(
                       qw'expand-series.guards --series-file', $series
                     , '--series-guards-file', $guards
                  );
                  die unless -f $series;
               } else {
                  # There must be a "series" file then.
                  if (-l $series || !-f $series) {
                     die
                          qq[Patch 'series' file "$series" must exist ]
                        . 'and be a plain text file'
                     ;
                  }
               }
            }
            # Copy template file to temporary storage for subsequent patching.
            $sh->call(qw'cp --', $ovl, $tmpfile);
            # Read series file.
            {
               my $sfh= new file('<', $series);
               my($patch, $pipe, $file, $ctr, $listed);
               (undef, undef, $listed)= File::Spec->splitpath($ovl);
               while (defined($patch= $sfh->readline)) {
                  $patch =~ s/^\s*(#.*)?|\s*$//sg;
                  next if $patch eq '';
                  $patch= File::Spec->catfile($psd, $patch);
                  unless (-f $patch) {
                     die
                          qq[Patch "$patch" is referenced in 'series' file ]
                        . 'but that patch file does not exist'
                     ;
                  }
                  $pipe= new file(qq'lsdiff --strip=1 "$patch" |');
                  $ctr= 0;
                  while (defined($file= $pipe->readline)) {
                     chomp $file;
                     if ($file ne $listed) {
                        die
                             qq'Patch "$patch" wants to modify file "$file" '
                           . qq'instead of file "$listed" as required'
                        ;
                     }
                     ++$ctr;
                  }
                  undef $pipe; # Close it via destructor.
                  if ($ctr != 1) {
                     die
                          qq'Patch "$patch" wants contains multiple patches '
                        . qq'for file "$listed" instead a single patch '
                        . qq'as required'
                     ;
                  }
                  # Apply patch.
                  $sh->call(
                       qw'patch --strip=1 --quiet --no-backup-if-mismatch --'
                     , $tmpfile, $patch
                  );
               }
            }
            # All patches from the 'series' file have been applied.
            $sh->call('touch', '--reference=' . $ovl, '--', $tmpfile);
         };
         if (($x= -f $cache) && mtime > $t) {
            # Cache file exists and is newer than overlay template file.
            &$expand;
            $sh->try_next;
            if ($sh->call(qw'cmp -s --', $tmpfile, $cache) == 0) {
               # Special case: File contents are the same, just the
               # mtime differs. In this case, we just update the mtime.
               updating($ovl, $cache);
               $sh->call('touch', '--reference=' . $tmpfile, '--', $ovl);
            } else {
               # File contents are also different.
               # We cannot resolve this automatically - let the user do it.
               die
                    qq'Please update the patches for file "$ovl" '
                  . qq'(in directory "$psd") in order to match '
                  . qq'the contents of file "$cache"'
               ;
            }
         } elsif (!$x || $t > mtime) {
            # Overlay template is newer or cache file does not exist.
            # Update cache file from expanded template.
            &$expand;
            updating($cache, $ovl);
            $sh->call(qw'cp -af --', $tmpfile, $cache);
         }
      }
   } else {
      # The overlay file is a literal file to be distributed.
      # Reconcile overlay file and cache file.
      # $t is overlay file mtime.
      if (($x= -f $cache) && mtime > $t) {
         # Cache file exists and is newer. Update overlay file.
         updating($ovl, $cache);
         $sh->call(qw'cp -af --', $cache, $ovl);
      } elsif (!$x || $t > mtime) {
         # Overlay file is newer or cache file does not exist.
         # Update cache file.
         updating($cache, $ovl);
         $sh->call(qw'cp -af --', $ovl, $cache);
      }
   }
   # Reconcile live-cache files with live filesystem files.
   die qq'"$live" is a symbolic link rather than a plain file' if -l $live;
   $t= mtime if $x= -e _;
   die qq'"$cache" must exist as "$live" also exists' unless -e $cache;
   # $t is mtime of $live, mtime() gets the mtime of $cache.
   if (mtime > $t) {
      # Live-cache file is newer than live filesystem counterpart.
      if ($sh->call(qw'cmp -s --', $live, $cache) == 0) {
         # Special case: File contents are the same, just the
         # mtime differs. In this case, we just update the mtime.
         updating($live, $cache);
         $sh->call('touch', '--reference=' . $cache, '--', $live);
      } else {
         # File contents are also different.
         # We cannot resolve this automatically - let the user do it.
         die
              qq'Please reconcile the changes in live filesystem '
            . qq'file "$live" with the contents of the cached '
            . qq'file "$cache", which has been derived from '
            . qq'the overlay file "$ovl"'
            . ($psd ? qq' (in directory "$psd")' : '')
         ;
      }
   } elsif (mtime < $t) {
      # Live filesystem file is newer than live-cache counterpart.
      # Update cache.
      updating($cache, $live);
      $sh->call(qw'cp -a --', $live, $cache);
      goto reexamine;
   }
}


sub manage {
   my($basedir, $rpath, $exclusions)= @_;
   my(@d, $entry, $path, $abspath);
   $abspath= File::Spec->catdir($basedir, $rpath);
   {
      my $dh= new directory($abspath);
      while (defined($entry= $dh->read)) {
         next if exists $exclusions->{$entry};
         next unless File::Spec->no_upwards($entry);
         $path= File::Spec->catfile($abspath, $entry);
         if (-l $path || -f _) {
            if ($path =~ /~/) {
               die
                    qq[File "$path" contains a '~'-character. ]
                  . 'This is not allowed and will most likely '
                  . 'be a backup file. '
                  . 'Please remove that file before running this script'
               ;
            }
            reconcile_file
                  +(
                     map {
                          defined()
                        ? File::Spec->catfile(
                             File::Spec->catdir($basedir, $_, $rpath), $entry
                          )
                        : $path
                        ;
                     } pristine_tree, undef, live_cache_tree
                  )
               , File::Spec->catfile(
                    File::Spec->catdir($ROOT, $rpath), $entry
                 )
               , "$path.patches"
            ;
         } elsif (-d _) {
            push @d, $entry unless $entry =~ /.+\.patches$/;
            foreach (qw/.pc/) {
               if ($entry eq $_) {
                  die
                       qq'Directory "$path" exists! '
                     . 'It must be removed before this script can be run'
                  ;
               }
            }
         }
      }
   }
   foreach $entry (@d) {
      $path= File::Spec->catdir($rpath, $entry);
      foreach (live_cache_tree, pristine_tree) {
         ensure_dir +File::Spec->catdir($basedir, $_, $path);
      }
      &manage($basedir, $path, $exclusions);
   }
}


if (exists $ENV{QUILT_PATCHES}) {
   die
        'Environment variable $QUILT_PATCHES is currently defined '
      . qq[as 'exported' and is set to the value "$ENV{QUILT_PATCHES}". ]
      . 'Please unset this variable before running this script.'
   ;
}
$tmpfile= File::Spec->catfile(File::Temp::tempdir(CLEANUP => 1), "tmp");
$sh= new Lib::ShellCmd(
   -log => DEBUGGING ? *STDOUT{IO} : undef, -noop => !!DEBUGGING
);
# Honor the ROOT variable from "/etc/make.conf".
$ROOT= qx{emerge --info | grep '^ROOT='};
$ROOT= qx{eval "$ROOT" && printf '%s' \$ROOT} || File::Spec->rootdir;
{
   # Determine config file path.
   use constant cfg_path => '/etc/dispatch-conf.conf';
   my($vol, $subdirs, $file)= File::Spec->splitpath(cfg_path);
   my $cfg= File::Spec->catfile(
        File::Spec->catdir(File::Spec->catpath($vol, $ROOT, ''), $subdirs)
      , $file
   );
   if (-f $cfg) {
      # Read config file.
      my $cfg= new file('<', $cfg);
      while (defined($_= $cfg->readline)) {
         $cfg_RCS= 1 if /^use-rcs\s*=\s*yes\s*$/i;
         if (/^archive-dir\s*=\s*(.+?)\s*$/i) {
            (undef, $cfg_archive)= File::Spec->splitpath($1, 1);
            my($vol, $root)= File::Spec->splitpath($ROOT, 1);
            $cfg_archive= File::Spec->catpath(
               $vol, File::Spec->catdir($root, $cfg_archive), ''
            );
         }
      }
   }
}
my $basedir= $FindBin::Bin;
foreach (pristine_tree, live_cache_tree) {
   ensure_dir +File::Spec->catdir($basedir, $_);
}
&manage(
     $basedir, File::Spec->curdir
     , {
        map {$_, undef}
          $FindBin::Script, more_toplevel_excludes
        , pristine_tree, live_cache_tree
     }
);
