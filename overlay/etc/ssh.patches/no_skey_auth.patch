Disable S/KEY authentication for this server.

S/KEY generates a sequence of one-time-passwords by concatenating
a non-secret salt with a secret password, and applying a hash
function recursively for N iterations.

The Nth hash is saved, but the (N-1)th hash value is asked for as
a password. Therefore, the server has never to store the actual
password, only the result of hashing it. When the next password
(the hash value from the previous iteration) is entered, it is
hashed in order to see whether it matches the stored hash.

If it does, the password is value and the password hash just
entered is stored in the database, requiring to enter the (N-2)th
hash for the next login.

The basic idea of S/KEY is therefore quite good.

But in practice it has a severe design flaw: No matter how large
the output of the hash function used may be, it is "folded" (=
reduced) to 64 Bit in each iteration.

This means that an attacker who can sniff one of the
one-time-passwords, can find the next valid password with a
brute-force offline attack of complexity 2 ** 63 on the average,
by just hashing every possible 64-bit-value, "folding" the result,
and compare it with the sniffed one-time-password.

An offline-attack of order 2 ** 64 is not too difficult to
perform, even for moderately equipped adverseries.

Another problem of S/KEY is that it cannot protect against
man-in-the-middle-attacks.

Therefore, S/KEY should not be used at all.

Index: ssh/sshd_config
===================================================================
--- ssh.orig/sshd_config
+++ ssh/sshd_config
@@ -72,7 +72,7 @@ PasswordAuthentication no
 
 # anchor_1i2w6k7g8dtsxb62ev3eliju4_6
 # Change to no to disable s/key passwords
-#ChallengeResponseAuthentication yes
+ChallengeResponseAuthentication no
 
 # Kerberos options
 #KerberosAuthentication no
