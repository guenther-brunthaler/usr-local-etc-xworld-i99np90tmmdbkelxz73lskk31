@version: 3.0
# $Header: /etc/syslog-ng/syslog-ng.conf,v 1.3 2005/07/16 00:42:16 root Exp $
#
# Syslog-ng configuration file

# System local facility allocation:
#
# local0: local administrative messages (e. g. startup/shutdown scripts).
# local1: unassigned.
# local2: auditing for privileged users/activities.
# local3: auditing for normal users/activities.
# local4: security-sensitive debugging information (passwords etc).
# local5: iptables firewall.
# local6: anti-virus / intrusion detection / other firewall.
# local7: unassigned.


options { 
	long_hostnames(off); 
	flush_lines(0); 

	# The default action of syslog-ng 1.6.0 is to log a STATS line
	# to the file every 10 minutes.  That's pretty ugly after a while.
	# Change it to every 12 hours so you get a nice daily update of
	# how many messages syslog-ng missed (0).
	stats_freq(43200);
};

# SOURCES:
# source <sourcename> { driver(params); ...; };
# Drivers are: file(<filename>), unix-dgram(<filename>),
# unix-stream(<filename>), udp(<ip>,<port>), tcp(<ip>,<port>),
# pipe(<filename>), internal().

# The syslog() libc function.
source s_syslog { unix-stream("/dev/log" max-connections(256)); };
# Messages from the logger itself.
source s_logger { internal(); };
# The kernel ring buffer which may be dumped with "dmesg".
source s_kernel { file("/proc/kmsg" program_override("kernel: ")); };

# DESTINATIONS:
# destination <destname> { driver(params); ...; };
# Drivers are: file(<filename>), unix-dgram(<filename>),
# unix-stream(<filename>), udp(<ip>,<port>), tcp(<ip>,<port>),
# usertty(<username>)

destination d_all {
	# All messages - well, *nearly* all.
	# For the sake of privacy, messages from LOG_LOCAL4 are excluded.
	file(
		"/var/log/messages"
		template("$YEAR-$MONTH-$DAY $HOUR:$MIN:$SEC $FACILITY-$LEVEL@$HOST $MSGHDR$MSG\n")
	);
};
destination d_sysconsole {
	# Important messages to be displayed on the system console.
	# This should only be critical messages when the log files
	# may not be operational or accessible any more, such as
	# file system damage or startup failures of the login process.
	file(
		"/dev/tty12"
		template("$YEAR-$MONTH-$DAY $HOUR:$MIN:$SEC $FACILITY-$LEVEL@$HOST $MSGHDR$MSG\n")
	);
};
destination d_kernel {
	# Kernel output during normal work.
	# Should not include the usual startup-crap which will be saved
	# into /var/log/dmesg instead on each startup.
	file(
		"/var/log/kernel"
		template("$YEAR-$MONTH-$DAY $HOUR:$MIN:$SEC $FACILITY-$LEVEL $MSGHDR$MSG\n")
	);
};
destination d_logger {
	# Messages from syslog-ng itself.
	file(
		"/var/log/logger"
		template("$YEAR-$MONTH-$DAY $HOUR:$MIN:$SEC $LEVEL $MSGHDR$MSG\n")
	);
};
destination d_cron {
	# Messages from cron and consorts.
	file(
		"/var/log/cron"
		template("$YEAR-$MONTH-$DAY $HOUR:$MIN:$SEC $FACILITY-$LEVEL $MSGHDR$MSG\n")
	);
};
destination d_daemon {
	# Messages from Disk And Execution MONitors.
	file(
		"/var/log/daemon"
		template("$YEAR-$MONTH-$DAY $HOUR:$MIN:$SEC $LEVEL $MSGHDR$MSG\n")
	);
};
destination d_auth {
	# Authentication related stuff, such as logons or login failures.
	file(
		"/var/log/auth"
		template("$YEAR-$MONTH-$DAY $HOUR:$MIN:$SEC $FACILITY-$LEVEL $MSGHDR$MSG\n")
	);
};
destination d_critical {
	# Critical error messages only, that will be of interest to the admin
	# in any case.
	file(
		"/var/log/critical"
		template("$YEAR-$MONTH-$DAY $HOUR:$MIN:$SEC $FACILITY-$LEVEL $MSGHDR$MSG\n")
	);
};
destination d_master {
	# Filtered version of /var/log/messages.
	# Contains mostly the same entries, except ones that could
	# disturb up the typical sequential logging output flow or are
	# extremely bulky.
	# That is, messages from cron, kernel, firewall and syslog-ng
	# are excluded.
	file(
		"/var/log/master"
		template("$YEAR-$MONTH-$DAY $HOUR:$MIN:$SEC $FACILITY-$LEVEL@$HOST $MSGHDR$MSG\n")
	);
};
destination d_debuginfo {
	# Contains a copy of all DEBUG and INFO priority events,
	# except for LOG_LOCAL4 events which are considered private.
	file(
		"/var/log/debuginfo"
		template("$YEAR-$MONTH-$DAY $HOUR:$MIN:$SEC $FACILITY-$LEVEL@$HOST $MSGHDR$MSG\n")
	);
};
destination d_local0admin {
	# local0: local administrative messages (e. g. startup/shutdown scripts).
	# Contains LOG_LOCAL0 events which are considered private/classified.
	file(
		"/var/log/local0admin"
		template("$YEAR-$MONTH-$DAY $HOUR:$MIN:$SEC $LEVEL@$HOST $MSGHDR$MSG\n")
	);
};
destination d_local2sulog {
	# local2: auditing for privileged users/activities.
	# Contains LOG_LOCAL2 events which are considered private/classified.
	file(
		"/var/log/local2sulog"
		template("$YEAR-$MONTH-$DAY $HOUR:$MIN:$SEC $LEVEL@$HOST $MSGHDR$MSG\n")
	);
};
destination d_local3audit {
	# local3: auditing for normal users/activities.
	# Contains LOG_LOCAL3 events which are considered private/classified.
	file(
		"/var/log/local3audit"
		template("$YEAR-$MONTH-$DAY $HOUR:$MIN:$SEC $LEVEL@$HOST $MSGHDR$MSG\n")
	);
};
destination d_local4exposure {
	# Contains LOG_LOCAL4 events which are considered private/classified.
	# It will typically be used for private information such as passwords
	# which will normally not be logged, but may need to be occasionally
	# for debugging purposes.
	# Events of this type will never be included into any other log file,
	# and will also never be archived.
	# It may, however, be rotated if it exceeds its maximum size,
	# but even then only 1 rotated copy will be kept at maximum.
	# Old rotated files which are to be deleted will be shredded instead
	# of just be removed/unlinked.
	file(
		"/var/log/local4exposure"
		template("$YEAR-$MONTH-$DAY $HOUR:$MIN:$SEC $LEVEL@$HOST $MSGHDR$MSG\n")
	);
};
destination d_local5iptables {
	# local5: iptables firewall.
	# Contains LOG_LOCAL5 events which are considered private/classified.
	file(
		"/var/log/local5iptables"
		template("$YEAR-$MONTH-$DAY $HOUR:$MIN:$SEC $LEVEL@$HOST $MSGHDR$MSG\n")
	);
};
destination d_local6ids {
	# local6: anti-virus / intrusion detection / other firewall.
	# Contains LOG_LOCAL6 events which are considered private/classified.
	file(
		"/var/log/local6ids"
		template("$YEAR-$MONTH-$DAY $HOUR:$MIN:$SEC $LEVEL@$HOST $MSGHDR$MSG\n")
	);
};
destination d_trafficvol {
	# Contains information helpful for traffic volume accounting.
	file(
		"/var/log/trafficvol"
		template("$YEAR-$MONTH-$DAY $HOUR:$MIN:$SEC $HOST $MSGHDR$MSG\n")
	);
};

# FILTERS:
# filter <filtername> { expression; };
# Expressions use "and", "or", "not" to connect primitives.
# Primitives: facility(<facility>, ...),
# level(<level>, <level>..<level>, ...), program(<regexp>), host(<regexp>),
# match(<msg_regexp>)

filter f_all {
	not (
		facility(local4)
		or (
			facility(kern)
			and match("kernel" value ("$PROGRAM"))
			and match("evbug\.c.*Event" value ("$MSGONLY"))
		)
	);
};
filter f_cron { facility(cron) or program("^fcron") and not facility(local4); };
filter f_auth { facility(auth, authpriv) and not level(debug); };
filter f_direct_kernel {
	not (
		facility(local4) or level(debug, info)
		or (
			facility(kern)
			and match("kernel" value ("$PROGRAM"))
			and match("evbug\.c.*Event" value ("$MSGONLY"))
		)
	);
};
filter f_syslog_kernel { facility(kern) and not level(debug, info); };
filter f_critical { level(emerg, crit) and not facility(local4); };
filter f_sysconsole { level(emerg, crit, alert) and not facility(local4); };
filter f_direct_syslog { not facility(local4); };
filter f_syslog { facility(syslog); };
filter f_daemon { facility(daemon) and not facility(local4); };
filter f_master {
	not facility(syslog, cron, daemon, kern, local4)
	and not level(debug, info)
	and not program("^fcron");
};
filter f_debuginfo {
	level(debug, info) and not (
		facility(local4)
		or (
			facility(kern)
			and match("kernel" value ("$PROGRAM"))
			and match("evbug\.c.*Event" value ("$MSGONLY"))
		)
	);
};
filter f_local0admin { facility(local0); };
filter f_local2sulog { facility(local2); };
filter f_local3audit { facility(local3); };
filter f_local4exposure {
	facility(local4) or (
		facility(kern)
		and match("kernel" value ("$PROGRAM"))
		and match("evbug\.c.*Event" value ("$MSGONLY"))
	);
};
filter f_local5iptables { facility(local5); };
filter f_local6ids { facility(local6, local2); };
filter f_trafficvol {
	facility(daemon) and program("^pppd$")
	and match("(Connect time\|Sent .* received)" value("$MSGONLY"));
};

# LOG FILTER GRAPHS:
# log { source S1; source S2; ...; filter F1; filter F2; ...;
# destination D1; destination D2; ...; };
# Multiple filters are ANDed together.

log { source(s_logger); filter(f_direct_syslog); destination(d_logger); };
log { source(s_syslog); filter(f_syslog); destination(d_logger); };
log { source(s_kernel); filter(f_direct_kernel); destination(d_kernel); };
log { source(s_syslog); filter(f_syslog_kernel); destination(d_kernel); };
log { source(s_syslog); filter(f_cron); destination(d_cron); };
log { source(s_syslog); filter(f_daemon); destination(d_daemon); };
log { source(s_syslog); filter(f_auth); destination(d_auth); };
log { source(s_kernel); source(s_logger); source(s_syslog); filter(f_critical); destination(d_critical); };
log { source(s_kernel); source(s_logger); source(s_syslog); filter(f_sysconsole); destination(d_sysconsole); };
log { source(s_kernel); source(s_logger); source(s_syslog); filter(f_master); destination(d_master); };
log { source(s_kernel); source(s_logger); source(s_syslog); filter(f_all); destination(d_all); };
log { source(s_kernel); source(s_logger); source(s_syslog); filter(f_debuginfo); destination(d_debuginfo); };
log { source(s_kernel); source(s_syslog); filter(f_local0admin); destination(d_local0admin); };
log { source(s_kernel); source(s_syslog); filter(f_local2sulog); destination(d_local2sulog); };
log { source(s_kernel); source(s_syslog); filter(f_local3audit); destination(d_local3audit); };
log { source(s_kernel); source(s_logger); source(s_syslog); filter(f_local4exposure); destination(d_local4exposure); };
log { source(s_kernel); source(s_syslog); filter(f_local5iptables); destination(d_local5iptables); };
log { source(s_kernel); source(s_syslog); filter(f_local6ids); destination(d_local6ids); };
log { source(s_syslog); filter(f_trafficvol); destination(d_trafficvol); };
